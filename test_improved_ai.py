#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
测试改进后的UltimateThreatAI进攻策略
验证AI现在是否更倾向于进攻而不是防守
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ultimate_threat_ai import UltimateThreatAI

def test_improved_attack_strategy():
    """测试改进后的进攻策略"""
    print("=== 测试改进后的进攻策略 ===")
    
    ai = UltimateThreatAI()
    
    # 测试场景1：AI有活三机会，对手也有活三
    print("\n--- 场景1：AI有活三机会，对手也有活三 ---")
    board1 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # AI有活三
        [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],  # 对手有活三
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    
    print("测试新的进攻策略...")
    move1 = ai.get_move(board1, 1)
    print(f"AI选择: {move1}")
    
    # 分析结果
    if move1:
        if move1[0] == 7 and move1[1] == 6:  # 完成AI的活三
            print("SUCCESS: AI选择了进攻！")
        elif move1[0] == 8 and move1[1] == 10:  # 防守对手的活三
            print("FAILED: AI选择了防守，应该优先进攻")
        else:
            print(f"AI选择了其他位置: {move1}")
    
    # 测试场景2：AI有双活三机会
    print("\n--- 场景2：AI有双活三机会 ---")
    board2 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 垂直方向的种子
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 水平方向的种子
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    
    # 在(8,4)落子可以形成双活三
    print("测试双活三检测...")
    move2 = ai.get_move(board2, 1)
    print(f"AI选择: {move2}")
    
    if move2 and move2[0] == 8 and move2[1] == 4:
        print("SUCCESS: AI发现了双活三机会！")
    else:
        print("FAILED: AI没有发现双活三机会")
    
    # 测试场景3：AI只有冲四机会
    print("\n--- 场景3：AI有冲四机会 ---")
    board3 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # AI有三子
        [0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],  # 对手有活三（被阻挡）
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    
    print("测试冲四机会检测...")
    move3 = ai.get_move(board3, 1)
    print(f"AI选择: {move3}")
    
    if move3 and move3[0] == 7 and move3[1] == 6:
        print("SUCCESS: AI选择了冲四！")
    else:
        print("AI选择了其他策略")

def test_attack_functions():
    """测试新的进攻函数"""
    print("\n=== 测试新的进攻函数 ===")
    
    ai = UltimateThreatAI()
    
    # 测试双活三检测
    print("\n--- 测试双活三检测函数 ---")
    import numpy as np
    board_test = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    
    double_threat = ai.find_double_live_three_opportunity(np.array(board_test), 1)
    print(f"双活三检测结果: {double_threat}")
    
    if double_threat:
        print("SUCCESS: 双活三检测功能正常")
    else:
        print("FAILED: 双活三检测功能有问题")
    
    # 测试活三检测
    live_three = ai.find_live_three_opportunity(np.array(board_test), 1)
    print(f"活三检测结果: {live_three}")
    
    # 测试冲四检测
    rush_four = ai.find_rush_four_opportunity(np.array(board_test), 1)
    print(f"冲四检测结果: {rush_four}")

if __name__ == "__main__":
    test_improved_attack_strategy()
    test_attack_functions()